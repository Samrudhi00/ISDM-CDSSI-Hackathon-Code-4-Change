# -*- coding: utf-8 -*-
"""EDA_Code_for_Change.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnFASiY654-wKLKSlFeWh0rJXFMJiVwd

#  Predicting financial vulnerability of women-headed

**Develop an accurate model for predicting financial risk in these households.
And Incorporate exploratory data analysis (EDA) for comprehensiveÂ insights**
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

data = pd.read_csv("/content/drive/MyDrive/PRICE_dataset.csv")

data.head()

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

"""As we are focusing on female we will elimate male data

"""

# Find columns where the value in 'Q1_4' column is 'Urban'
urban_columns = [col for col in data.columns if data[col].dtype == 'object' and (data['Q1_4'] == 'Urban').all()]

# Drop the columns found
data.drop(columns=urban_columns, inplace=True)

"""Now data contains the dataset without columns where 'Q1_4' value is 'Urban'

Our problem statement indicates finanicail vulnerability in rular sector we will eliminate urban
"""

# Find columns where the value in 'Q2_4' column is 'Male'
male_columns = [col for col in data.columns if data[col].dtype == 'object' and (data['Q2_4'] == 'Male').all()]

# Drop the columns found
data.drop(columns=male_columns, inplace=True)

"""Now data contains the dataset without columns where 'Q2_4' value is 'Male'"""

# Print column names
print(data.columns)

# Specify columns to remove
columns_to_remove = ['Q1_6', 'Q1_7', 'Q1_8', 'Q1_9', 'Q1_10', 'Q1_3', 'Q1_5']

# Check if the columns exist in the DataFrame
existing_columns = [col for col in columns_to_remove if col in data.columns]

# Drop the specified columns if they exist
if existing_columns:
    data.drop(columns=existing_columns, inplace=True)
    print("Columns removed successfully.")
else:
    print("Columns not found in the DataFrame.")

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Define a threshold for missing values (e.g., 0.5 means 50% missing values)
missing_threshold = 0.6

# Calculate missing value proportions for each column
missing_values = data.isnull().mean()

# Get the column names exceeding the missing value threshold
columns_to_remove = missing_values[missing_values > missing_threshold].index

columns_to_remove

# Define a threshold for missing values (e.g., 0.5 means 50% missing values)
missing_threshold = 0.5

# Calculate missing value proportions for each column
missing_values = data.isnull().mean()

# Get the column names exceeding the missing value threshold
columns_to_remove = missing_values[missing_values > missing_threshold].index

# Drop the columns with too many missing values
data.drop(columns=columns_to_remove, inplace=True)

# Now 'data' contains the dataset without the columns with too many missing values

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Print the column names in the DataFrame
print(data.columns)

# Remove the specified columns
#columns_to_remove = ['Q2_39a1', 'Q2_39b1', 'Q2_39c1', 'Q2_39d1']
#data.drop(columns=columns_to_remove, inplace=True)

#Q2_39e1 have more than half missing values
# Add a new column 'Yojana' with the corresponding values
data['Yojana'] = data['Q2_39a2'] + data['Q2_39b2'] + data['Q2_39c2'] + data['Q2_39d2']

# Now 'data' contains the dataset with the specified columns removed and the new 'Yojana' column added

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

"""TO cheak of loans"""

# List of columns to check
columns_to_check = ['Q7_2E_2', 'Q7_2E_3', 'Q7_2E_4', 'Q7_2E_6', 'Q7_2E_7', 'Q7_2F_2', 'Q7_2F_3', 'Q7_2F_4', 'Q7_2F_6', 'Q7_2F_7']

# Check which columns are present in the DataFrame
present_columns = [col for col in columns_to_check if col in data.columns]

# Print the columns present in the DataFrame
print("Columns present in the DataFrame:", present_columns)

# Add a new column 'loanAmount' by summing values from 'Q7_2F_7' and 'Q7_2E_7'
data['loanAmount'] = data['Q7_2F_7'] + data['Q7_2E_7']

# Remove the specified columns
columns_to_remove = ['Q7_2E_2', 'Q7_2F_2']
data.drop(columns=columns_to_remove, inplace=True)

# Now 'data' contains the dataset with the new 'loanAmount' column added and the specified columns removed

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q2_12', 'Q2_14', 'Q2_15', 'Q2_16', 'Q2_17']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Remove specified columns
columns_to_remove = ['Q2_19', 'Q2_20', 'Q2_21a', 'Q2_21b', 'Q2_21c', 'Q2_22_1', 'Q2_23', 'Q2_24', 'Q2_25', 'Q2_26']
data.drop(columns=columns_to_remove, inplace=True)

# Rename the column
data.rename(columns={'Q2_21d': 'HUF'}, inplace=True)

# Change values in the 'HUF' column
data['HUF'].replace({'NO': 0, 'YES': 1}, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q2_27a', 'Q2_27b', 'Q2_28a', 'Q2_28b', 'Q2_29_1', 'Q2_30a', 'Q2_30b', 'Q2_30c', 'Q2_30d', 'Q2_30e', 'Q2_31']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q2_36', 'Q2_40a', 'Q2_40b', 'Q2_40c', 'Q2_42', 'Q2_43a', 'Q2_43b',
                     'Q3_1', 'Q3_2', 'Q3_3a', 'Q3_3b', 'Q3_3c', 'Q3_4', 'Q3_5', 'Q3_7', 'Q3_8',
                     'Q3_9', 'Q3_10','Q3_12', 'Q3_13', 'Q3_14', 'Q3_16', 'Q3_17',
                     'Q3_18', 'Q3_19', 'Q3_20']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

# Rename and convert values in column 'Q2_41'
data.rename(columns={'Q2_41': 'GaribKalayanYojna'}, inplace=True)
data['GaribKalayanYojna'].replace({'yes': 1, 'no': 0}, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q7_1', 'Q7_2A_2', 'Q7_2A_7', 'Q7_2B_2',
                     'Q8_1', 'Q8_2', 'Q8_4',
                     'Q9_1A', 'Q9_3_1A', 'Q9_3_2A', 'Q9_3_3A', 'Q9_3_4A', 'Q9_3_5A', 'Q9_3_6A',
                     'Q9_3_7A', 'Q9_3_8A', 'Q10_1', 'Q10_2', 'Q10_3', 'Q10_4', 'Q10_5', 'Q10_6',
                     'Q10_7', 'Q10_8', 'Q10_9', 'Q10_10', 'Q10_11', 'Q10_12']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)



# Create new column 'total_income' by summing values from 'Q5_2' to 'Q5_8'
data['total_income'] = data[['Q5_2', 'Q5_3', 'Q5_4', 'Q5_5', 'Q5_6', 'Q5_7', 'Q5_8']].sum(axis=1)

# Drop columns 'Q5_2' to 'Q5_8'
columns_to_drop = ['Q5_2', 'Q5_3', 'Q5_4', 'Q5_5', 'Q5_6', 'Q5_7', 'Q5_8']
data.drop(columns=columns_to_drop, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Rename the column 'Total_Expenditure' to 'Q6_2'
data.rename(columns={'Total_Expenditure': 'Q6_2'}, inplace=True)

# Specify columns to remove
columns_to_remove = ['Q6_1', 'Q6_3', 'Q6_4', 'Q6_5', 'Q6_6', 'Q6_7', 'Q6_8', 'Q6_9', 'Q6_10', 'Q6_11', 'Q6_12', 'Q6_13', 'Q6_14', 'Q6_15', 'Q6_16', 'Q6_17']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q7_2B_7', 'Q7_2C_2', 'Q7_2C_7', 'Q7_2D_2', 'Q7_2D_7', 'Q8_5A', 'Q8_5B', 'Q8_5C', 'Q8_5D', 'Q8_5E', 'Q8_5F']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

# Rename the column 'Q8_5G' to 'routine_expenditure'
data.rename(columns={'Q8_5G': 'routine_expenditure'}, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Specify columns to remove
columns_to_remove = ['Q9_3_1b', 'Q9_3_2b', 'Q9_3_3b', 'Q9_3_4b', 'Q9_3_5b', 'Q9_3_6b', 'Q9_3_7b', 'Q9_3_8b']

# Drop the specified columns
data.drop(columns=columns_to_remove, inplace=True)

# Rename the column 'Q9_2A' to 'Amount_Invested'
data.rename(columns={'Q9_2A': 'Amount_Invested'}, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Get all column names
column_names = data.columns.tolist()

# Print the column names
print(column_names)

# Rename columns
data.rename(columns={'Q1_1': 'No', 'Q1_2': 'state_code', 'Q1_4': 'area', 'Q2_3': 'age', 'Q2_4': 'gender'}, inplace=True)

# Remove 'area' column if it exists
if 'area' in data.columns:
    data.drop(columns=['area'], inplace=True)

# Remove 'gender' column if it exists
if 'gender' in data.columns:
    data.drop(columns=['gender'], inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Rename columns
data.rename(columns={'Q2_5': 'Marriage_Status', 'Q2_11': 'SmartPhone', 'Q2_38': 'RationCard'}, inplace=True)

# Remove specified columns
columns_to_remove = ['Q2_9', 'Q2_10', 'Q2_39a2', 'Q2_39b2', 'Q2_39c2', 'Q2_39d2', 'Q2_39e2']
data.drop(columns=columns_to_remove, inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Remove column 'Q2_43c'
data.drop(columns=['Q2_43c'], inplace=True)

# Rename column 'Q6_2' to 'Annual_Routine_Expenditure'
data.rename(columns={'Q6_2': 'Annual_Routine_Expenditure'}, inplace=True)

# Create a new column 'newloan' by adding columns 'Q7_2E_7' and 'Q7_2F_7'
data['newloan'] = data['Q7_2E_7'] + data['Q7_2F_7']

# Remove columns 'Q7_2E_7' and 'Q7_2F_7'
data.drop(columns=['Q7_2E_7', 'Q7_2F_7'], inplace=True)

rows, columns = data.shape
print("Number of rows:", rows)
print("Number of columns:", columns)

# Rename columns
data.rename(columns={'Q2_6': 'Education_level', 'Q2_7': 'Primary_Occupation', 'Q2_8': 'total_members', 'Q2_13': 'HaveBankACC'}, inplace=True)

# Drop the 'newloan' column
# data.drop(columns=['newloan'], inplace=True)
#data.drop(columns=['loanAmount'], inplace=True)
# data.drop(columns=['routine_expenditure'], inplace=True)
data.drop(columns=['No'], inplace=True)

# Get the total number of columns
total_columns = len(data.columns)

# Get the names of all columns
column_names = data.columns.tolist()

# Print the total number of columns and their names
print("Total columns present:", total_columns)
print("Column names:")
for name in column_names:
    print(name)

data.head(25)

# Calculate financial_vulnerability
data['finanicial_Status'] = data['total_income'] - data['Annual_Routine_Expenditure'] - data['Yojana']

data.head(25)

# Calculate financial_vulnerability
data['financial_vulnerability'] = data['Amount_Invested'] + data['finanicial_Status']

from google.colab import files

# Save the DataFrame to a CSV file
data.to_csv('new_data.csv', index=False)

# Download the CSV file
files.download('new_data.csv')

data.head(25)

# @title Financial Vulnerability vs Total Income

import matplotlib.pyplot as plt
plt.scatter(data["financial_vulnerability"], data["total_income"])
plt.xlabel("Financial Vulnerability")
_ = plt.ylabel("Total Income")

# @title HaveBankACC vs HUF

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
plt.subplots(figsize=(8, 8))
df_2dhist = pd.DataFrame({
    x_label: grp['HUF'].value_counts()
    for x_label, grp in data.groupby('HaveBankACC')
})
sns.heatmap(df_2dhist, cmap='viridis')
plt.xlabel('HaveBankACC')
_ = plt.ylabel('HUF')

# @title SmartPhone vs state_code

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(data['SmartPhone'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(data, x='state_code', y='SmartPhone', inner='box', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

# @title Proportion of people with a bank account by marital status

import matplotlib.pyplot as plt
bank_account_counts = data.groupby(['Marriage_Status', 'HaveBankACC']).size().unstack()
plt.pie(bank_account_counts['Yes'], labels=bank_account_counts.index, autopct='%1.1f%%')
_ = plt.title('Proportion of people with a bank account by marital status')

# @title Total Income vs Amount Invested

import matplotlib.pyplot as plt
_ = plt.scatter(data["total_income"], data["Amount_Invested"])

# @title Marriage_Status

from matplotlib import pyplot as plt
import seaborn as sns
data.groupby('Marriage_Status').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Total Income vs Number of Members

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
data.groupby('total_members')['total_income'].mean().plot(kind='bar')
plt.xlabel('Number of Members')
plt.ylabel('Total Income')
_ = plt.title('Total Income vs Number of Members')

# @title HaveBankACC

from matplotlib import pyplot as plt
import seaborn as sns
data.groupby('HaveBankACC').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Total Income vs Total Members

import matplotlib.pyplot as plt
plt.scatter(data['total_members'], data['total_income'])
plt.xlabel('Total Members')
plt.ylabel('Total Income')
_ = plt.title('Total Income vs Total Members')

# @title Total Income vs Annual Routine Expenditure

import matplotlib.pyplot as plt
plt.scatter(data['total_income'], data['Annual_Routine_Expenditure'])
plt.xlabel('Total Income')
_ = plt.ylabel('Annual Routine Expenditure')

# @title Annual_Routine_Expenditure

from matplotlib import pyplot as plt
data['Annual_Routine_Expenditure'].plot(kind='hist', bins=20, title='Annual_Routine_Expenditure')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Financial status by bank account ownership

import matplotlib.pyplot as plt
data.groupby('HaveBankACC')['finanicial_Status'].mean().plot(kind='bar')
plt.xlabel('Have Bank Account')
_ = plt.ylabel('Average Financial Status')

# @title Financial Vulnerability vs Age

import matplotlib.pyplot as plt
plt.scatter(data['age'], data['financial_vulnerability'])
plt.xlabel('Age')
plt.ylabel('Financial Vulnerability')
_ = plt.title('Financial Vulnerability vs Age')

# @title total_members

from matplotlib import pyplot as plt
data['total_members'].plot(kind='hist', bins=20, title='total_members')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title age

from matplotlib import pyplot as plt
data['age'].plot(kind='hist', bins=20, title='age')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title state_code

from matplotlib import pyplot as plt
data['state_code'].plot(kind='hist', bins=20, title='state_code')
plt.gca().spines[['top', 'right',]].set_visible(False)

import seaborn as sns
import matplotlib.pyplot as plt

# Plot regression graph
sns.regplot(x='state_code', y='financial_vulnerability', data=data)
plt.xlabel('State Code')
plt.ylabel('Financial Vulnerability')
plt.title('Regression Graph of Financial Vulnerability and State Code')
plt.show()

